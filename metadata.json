import * as web3 from '@solana/web3.js';
import * as token from '@solana/spl-token';
import bs58 from 'bs58';

const METADATA_URL = "https://raw.githubusercontent.com/ashishjsharda/itch-token/main/metadata.json";

async function deployItchCoin() {
    try {
        // Connect to Solana network (devnet for testing)
        const connection = new web3.Connection(
            web3.clusterApiUrl('devnet'),
            'confirmed'
        );

        // Initialize deployer wallet (Replace with your wallet for production)
        const deployerPrivateKey = ""; // Add your private key here
        const deployerKeypair = web3.Keypair.fromSecretKey(
            bs58.decode(deployerPrivateKey)
        );

        console.log('Deployer public key:', deployerKeypair.publicKey.toString());

        // Check wallet balance
        const balance = await connection.getBalance(deployerKeypair.publicKey);
        console.log(`Wallet balance: ${balance / web3.LAMPORTS_PER_SOL} SOL`);

        if (balance < web3.LAMPORTS_PER_SOL) {
            throw new Error('Insufficient SOL balance for deployment');
        }

        // Token parameters
        const decimals = 9;
        const mintAuthority = deployerKeypair.publicKey;
        const freezeAuthority = deployerKeypair.publicKey;

        // Create mint account
        console.log('Creating mint account...');
        const mint = await token.createMint(
            connection,
            deployerKeypair,
            mintAuthority,
            freezeAuthority,
            decimals
        );

        console.log(`Token Mint: ${mint.toBase58()}`);

        // Create token account
        console.log('Creating token account...');
        const tokenAccount = await token.getOrCreateAssociatedTokenAccount(
            connection,
            deployerKeypair,
            mint,
            deployerKeypair.publicKey
        );

        console.log(`Token Account: ${tokenAccount.address.toBase58()}`);

        // Mint initial supply
        const initialSupply = 1_000_000_000; // 1 billion tokens
        console.log(`Minting ${initialSupply} tokens...`);
        await token.mintTo(
            connection,
            deployerKeypair,
            mint,
            tokenAccount.address,
            deployerKeypair,
            initialSupply * (10 ** decimals)
        );

        // Token metadata
        const metadata = {
            name: "ItchCoin",
            symbol: "ITCH",
            uri: METADATA_URL
        };

        console.log('=== ItchCoin Deployment Summary ===');
        console.log(`Name: ${metadata.name}`);
        console.log(`Symbol: ${metadata.symbol}`);
        console.log(`Decimals: ${decimals}`);
        console.log(`Initial Supply: ${initialSupply}`);
        console.log(`Mint Address: ${mint.toBase58()}`);
        console.log(`Token Account: ${tokenAccount.address.toBase58()}`);
        console.log(`Metadata URI: ${metadata.uri}`);
        console.log('================================');

        return { mint, tokenAccount: tokenAccount.address, metadata };
    } catch (error) {
        console.error('Deployment failed:', error);
        throw error;
    }
}

// Execute deployment
deployItchCoin()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
